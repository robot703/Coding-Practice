#include<iostream>
#include<vector>

using namespace std;

int M, N, K;
vector<vector<int>>field;
vector<vector<bool>>visited;

int dx[] = { 0,0,1,-1 };
int dy[] = { 1,-1,0,0 };

void dfs(int x, int y) {
	visited[x][y] = true;

	for (int i = 0; i < 4; i++) {
		int nx = x + dx[i];
		int ny = y + dy[i];

		if (nx >= 0 && nx < M && ny >= 0 && ny < N) {
			if (field[nx][ny] == 1 && !visited[nx][ny])
				dfs(nx,ny);
		}
	}
}

int main() {
	int T;
	cin >> T;

	while (T--) {
		cin >> M >> N >> K;

		field = vector<vector<int>>(M, vector<int>(N, 0));
		visited = vector<vector<bool>>(M, vector<bool>(N, false));

		for (int i = 0; i < K; i++) {
			int x, y;
			cin >> x >> y;
			field[x][y] = 1;
		}

		int worm = 0;
		for (int i = 0; i < M; i++) {
			for (int j = 0; j < N; j++) {
				if (field[i][j] == 1 && !visited[i][j]) {
					dfs(i, j);
					worm++;
				}
			}
		}
		cout << worm << '\n';
	}
}
